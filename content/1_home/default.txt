Title: Introduction

----

Content:

Oblik Toolkit is a collection of minimal and extensible JavaScript components and utilities. It's not focused on reactivity like Vue or React. It's also not a framework with predesigned components like Bootstrap. What it _does_ focus on is just interactive behaviors. Things like parallax and scroll effects, sliders, etc.

The toolkit can be compared to [UIKit](https://getuikit.com/), from which it has drawn a lot of inspiration. The main difference is that Oblik focuses solely on the JavaScript parts and depends on CSS as little as possible, leaving styling in your hands.

Main goals of the project are:

1. Giving you components with logic for interactive behaviors
2. Allowing you to easily extend those components or create your own
3. Providing a way to easily use components with just HTML attributes

## Architecture

- Components are expressed as ES6 classes in ES6 modules
- TypeScript is used to provide stability and enhance developer experience
- Code is compiled down to ES5 to support browsers up to IE11

Oblik is meant to be used as a dependency in your project where you import just the things you need. However, you could also use it straight from a CDN.

## Examples

The most direct way to use a component is to simply import it and attach it to an element with JavaScript. Here's an example with the (link: #todo text: Carousel) component:

(example: slider active: js)

However, having to manually query the needed DOM elements and intialize your components can become annoying and tough to deal with. That's where the (link: #todo text: Watcher) helps. It binds a [MutationObserver](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver) to an element (like the `<body>`) then automatically creates and destroys components you've registered:

(example: slider-watcher active: js)

If you look at the HTML, you'll see that you can initialize components and assign options to them via attributes. You can create your own components and use them in a similar fashion:

(example: custom-component active: js)

For more complex logic, you can have subcomponents as well. You'll automatically get a reference to them in the parent component:

(example: custom-subcomponent active: js)

Subcomponent elements don't have to be direct children of their parent component element, though. This gives you the flexibility to have whatever DOM structure you need. Like this:

```html
<div ob-foo>
	<section>
		<span ob-foo-text></span>
	</section>

	<div>
		<button ob-foo-toggle>Toggle</button>
	</div>
</div>
```

## Philosophy

The long-term goal of Oblik is to provide functionality that has a lot of options _through code_. Instead of having a single do-it-all solution that:

- has a ton of complicated code
- tries to handle every edge case 
- uses a large configuration object

...the target of Oblik is to provide [object-oriented](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object-oriented_JS) components that:

- are straightforward
- handle the majority of use cases
- can be configured through [inheritance](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)

In general, the idea is that instead of having one very large and complicated module, you have a base class with the base functionality. The source code is simple to understand and well documented. From there, you can get the _exact_ behavior you want by extending a method here and there.

We believe that's better than having a giant mess of options and features you're probably never going to use.